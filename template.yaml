AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  newObjectNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: NewMetadata
      TopicName: NewMetadata
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt addMetadata.Arn
        - Protocol: lambda
          Endpoint: !GetAtt categorizePhoto.Arn

  SNSPermissionToInvokeAddMetadata:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref addMetadata
      Principal: sns.amazonaws.com

  SNSPermissionToInvokeCategorizePhoto:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref categorizePhoto
      Principal: sns.amazonaws.com 
        
  extractMetadata:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: extractMetadataV2
      Description: Function that adds metadata for a fileName into DynamoDB table
      Handler: index.handler
      Runtime: nodejs10.x
      Timeout: 60
      CodeUri: ./extractmetadata/
      Role: !GetAtt extractMetadataRoleV2.Arn
      Tracing: Active
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref newObjectNotification
          S3_REGION: '{{resolve:ssm:DIGIGALLERY_PHOTO_BUCKET_REGION:1}}'
      Events:
        AddPhotoEvent:
          Type: S3
          Properties:
            Bucket: !Ref SrcBucket
            Events: s3:ObjectCreated:*
    DependsOn:
    - extractMetadataRoleV2
  
  addMetadata:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: addMetadataV2
      Description: Function that adds metadata for a fileName into DynamoDB table
      Handler: index.handler
      Runtime: nodejs10.x
      Timeout: 60
      CodeUri: ./addmetadata/
      Role: !GetAtt LambdaRoleToAccessDynamoDbV2.Arn
      Tracing: Active
      Environment:
        Variables:
          DB_REGION: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_REGION:1}}'
          DB_ENDPOINT: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_ENDPOINT:1}}'
          DB_TABLE_NAME: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_TABLE:1}}'
    DependsOn:
    - LambdaRoleToAccessDynamoDbV2
  
  categorizePhoto:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: categorizePhoto
      Description: Function that adds shopping category for a fileName into DynamoDB table
      Handler: index.handler
      Runtime: nodejs10.x
      Timeout: 60
      CodeUri: ./categorize/
      Role: !GetAtt LambdaRoleToAccessDynamoDbV2.Arn
      Tracing: Active
      Environment:
        Variables:
          DB_REGION: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_REGION:1}}'
          DB_ENDPOINT: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_ENDPOINT:1}}'
          DB_TABLE_NAME: '{{resolve:ssm:DIGIGALLERY_CATEGORY_DYNAMO_DB_TABLE:1}}'
    DependsOn:
    - LambdaRoleToAccessDynamoDbV2    
    
  getMetadata:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getMetadataV2
      Description: Function that gets metadata for a fileName into DynamoDB table
      Handler: index.handler
      Runtime: nodejs10.x
      Timeout: 60
      CodeUri: ./getmetadata/
      Role: !GetAtt LambdaRoleToAccessDynamoDbV2.Arn
      Tracing: Active
      Environment:
        Variables:
          DB_REGION: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_REGION:1}}'
          DB_ENDPOINT: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_ENDPOINT:1}}'
          DB_TABLE_NAME: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_TABLE:1}}'
      Events:
        metadata:
          Type: Api
          Properties:
            Path: /metadata/{fileName}
            Method: get
            RestApiId: !Ref metadataApi
    DependsOn:
    - LambdaRoleToAccessDynamoDbV2
  deleteMetadata:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteMetadataV2
      Description: Function that deletes metadata for a fileName into DynamoDB table
      Handler: index.handler
      Runtime: nodejs10.x
      Timeout: 60
      CodeUri: ./deletemetadata/
      Role: !GetAtt LambdaRoleToAccessDynamoDbV2.Arn
      Tracing: Active
      Environment:
        Variables:
          DB_REGION: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_REGION:1}}'
          DB_ENDPOINT: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_ENDPOINT:1}}'
          DB_TABLE_NAME: '{{resolve:ssm:DIGIGALLERY_DYNAMO_DB_TABLE:1}}'
      Events:
        DeletePhotoEvent:
          Type: S3
          Properties:
            Bucket: !Ref SrcBucket
            Events: s3:ObjectRemoved:*
    DependsOn:
    - LambdaRoleToAccessDynamoDbV2
  LambdaRoleToAccessDynamoDbV2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal:
              Service:
              - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: digigallery-xray-lambda-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
            Effect: Allow
            Resource: "*"
    
 
  extractMetadataRoleV2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole        
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal:
              Service:
              - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: digigallery-xray-lambda-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action:
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
            Effect: Allow
            Resource: "*"
  postMsgToTopicPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: postMsgToTopicPolicy
      Roles:
        - !Ref extractMetadataRoleV2
      PolicyDocument:
        Statement:
          - 
            Effect: "Allow"            
            Action: 
              - "sns:Publish"
            Resource: !Ref newObjectNotification
  SrcBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: '{{resolve:ssm:DIGIGALLERY_PHOTO_BUCKET:2}}'
  metadataApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: metadataV2
      StageName: prod
      TracingEnabled: true
Outputs:
  metadataApiDetails:
    Description: "API Prod stage endpoint"
    Value: !Sub "https://${metadataApi}.execute-api.${AWS::Region}.amazonaws.com/prod/metadata"